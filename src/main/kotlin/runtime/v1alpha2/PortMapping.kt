// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.PortMapping in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * PortMapping specifies the port mapping configurations of a sandbox.
 */
class PortMapping(
  /**
   * Protocol of the port mapping.
   */
  @field:WireField(
    tag = 1,
    adapter = "runtime.v1alpha2.Protocol#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val protocol: Protocol = Protocol.TCP,
  /**
   * Port number within the container. Default: 0 (not specified).
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "containerPort"
  )
  val container_port: Int = 0,
  /**
   * Port number on the host. Default: 0 (not specified).
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "hostPort"
  )
  val host_port: Int = 0,
  /**
   * Host IP.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "hostIp"
  )
  val host_ip: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<PortMapping, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is PortMapping) return false
    if (unknownFields != other.unknownFields) return false
    if (protocol != other.protocol) return false
    if (container_port != other.container_port) return false
    if (host_port != other.host_port) return false
    if (host_ip != other.host_ip) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + protocol.hashCode()
      result = result * 37 + container_port.hashCode()
      result = result * 37 + host_port.hashCode()
      result = result * 37 + host_ip.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """protocol=$protocol"""
    result += """container_port=$container_port"""
    result += """host_port=$host_port"""
    result += """host_ip=${sanitize(host_ip)}"""
    return result.joinToString(prefix = "PortMapping{", separator = ", ", postfix = "}")
  }

  fun copy(
    protocol: Protocol = this.protocol,
    container_port: Int = this.container_port,
    host_port: Int = this.host_port,
    host_ip: String = this.host_ip,
    unknownFields: ByteString = this.unknownFields
  ): PortMapping = PortMapping(protocol, container_port, host_port, host_ip, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<PortMapping> = object : ProtoAdapter<PortMapping>(
      FieldEncoding.LENGTH_DELIMITED, 
      PortMapping::class, 
      "type.googleapis.com/runtime.v1alpha2.PortMapping", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: PortMapping): Int {
        var size = value.unknownFields.size
        if (value.protocol != Protocol.TCP) size += Protocol.ADAPTER.encodedSizeWithTag(1,
            value.protocol)
        if (value.container_port != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2,
            value.container_port)
        if (value.host_port != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.host_port)
        if (value.host_ip != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.host_ip)
        return size
      }

      override fun encode(writer: ProtoWriter, value: PortMapping) {
        if (value.protocol != Protocol.TCP) Protocol.ADAPTER.encodeWithTag(writer, 1,
            value.protocol)
        if (value.container_port != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2,
            value.container_port)
        if (value.host_port != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.host_port)
        if (value.host_ip != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.host_ip)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): PortMapping {
        var protocol: Protocol = Protocol.TCP
        var container_port: Int = 0
        var host_port: Int = 0
        var host_ip: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              protocol = Protocol.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> container_port = ProtoAdapter.INT32.decode(reader)
            3 -> host_port = ProtoAdapter.INT32.decode(reader)
            4 -> host_ip = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return PortMapping(
          protocol = protocol,
          container_port = container_port,
          host_port = host_port,
          host_ip = host_ip,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: PortMapping): PortMapping = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
