// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.LinuxContainerResources in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * LinuxContainerResources specifies Linux specific configuration for
 * resources.
 * TODO: Consider using Resources from opencontainers/runtime-spec/specs-go
 * directly.
 */
class LinuxContainerResources(
  /**
   * CPU CFS (Completely Fair Scheduler) period. Default: 0 (not specified).
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "cpuPeriod"
  )
  val cpu_period: Long = 0L,
  /**
   * CPU CFS (Completely Fair Scheduler) quota. Default: 0 (not specified).
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "cpuQuota"
  )
  val cpu_quota: Long = 0L,
  /**
   * CPU shares (relative weight vs. other containers). Default: 0 (not specified).
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "cpuShares"
  )
  val cpu_shares: Long = 0L,
  /**
   * Memory limit in bytes. Default: 0 (not specified).
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "memoryLimitInBytes"
  )
  val memory_limit_in_bytes: Long = 0L,
  /**
   * OOMScoreAdj adjusts the oom-killer score. Default: 0 (not specified).
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "oomScoreAdj"
  )
  val oom_score_adj: Long = 0L,
  /**
   * CpusetCpus constrains the allowed set of logical CPUs. Default: "" (not specified).
   */
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "cpusetCpus"
  )
  val cpuset_cpus: String = "",
  /**
   * CpusetMems constrains the allowed set of memory nodes. Default: "" (not specified).
   */
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "cpusetMems"
  )
  val cpuset_mems: String = "",
  hugepage_limits: List<HugepageLimit> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<LinuxContainerResources, Nothing>(ADAPTER, unknownFields) {
  /**
   * List of HugepageLimits to limit the HugeTLB usage of container per page size. Default: nil (not
   * specified).
   */
  @field:WireField(
    tag = 8,
    adapter = "runtime.v1alpha2.HugepageLimit#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "hugepageLimits"
  )
  val hugepage_limits: List<HugepageLimit> = immutableCopyOf("hugepage_limits", hugepage_limits)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is LinuxContainerResources) return false
    if (unknownFields != other.unknownFields) return false
    if (cpu_period != other.cpu_period) return false
    if (cpu_quota != other.cpu_quota) return false
    if (cpu_shares != other.cpu_shares) return false
    if (memory_limit_in_bytes != other.memory_limit_in_bytes) return false
    if (oom_score_adj != other.oom_score_adj) return false
    if (cpuset_cpus != other.cpuset_cpus) return false
    if (cpuset_mems != other.cpuset_mems) return false
    if (hugepage_limits != other.hugepage_limits) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + cpu_period.hashCode()
      result = result * 37 + cpu_quota.hashCode()
      result = result * 37 + cpu_shares.hashCode()
      result = result * 37 + memory_limit_in_bytes.hashCode()
      result = result * 37 + oom_score_adj.hashCode()
      result = result * 37 + cpuset_cpus.hashCode()
      result = result * 37 + cpuset_mems.hashCode()
      result = result * 37 + hugepage_limits.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """cpu_period=$cpu_period"""
    result += """cpu_quota=$cpu_quota"""
    result += """cpu_shares=$cpu_shares"""
    result += """memory_limit_in_bytes=$memory_limit_in_bytes"""
    result += """oom_score_adj=$oom_score_adj"""
    result += """cpuset_cpus=${sanitize(cpuset_cpus)}"""
    result += """cpuset_mems=${sanitize(cpuset_mems)}"""
    if (hugepage_limits.isNotEmpty()) result += """hugepage_limits=$hugepage_limits"""
    return result.joinToString(prefix = "LinuxContainerResources{", separator = ", ", postfix = "}")
  }

  fun copy(
    cpu_period: Long = this.cpu_period,
    cpu_quota: Long = this.cpu_quota,
    cpu_shares: Long = this.cpu_shares,
    memory_limit_in_bytes: Long = this.memory_limit_in_bytes,
    oom_score_adj: Long = this.oom_score_adj,
    cpuset_cpus: String = this.cpuset_cpus,
    cpuset_mems: String = this.cpuset_mems,
    hugepage_limits: List<HugepageLimit> = this.hugepage_limits,
    unknownFields: ByteString = this.unknownFields
  ): LinuxContainerResources = LinuxContainerResources(cpu_period, cpu_quota, cpu_shares,
      memory_limit_in_bytes, oom_score_adj, cpuset_cpus, cpuset_mems, hugepage_limits,
      unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<LinuxContainerResources> = object :
        ProtoAdapter<LinuxContainerResources>(
      FieldEncoding.LENGTH_DELIMITED, 
      LinuxContainerResources::class, 
      "type.googleapis.com/runtime.v1alpha2.LinuxContainerResources", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: LinuxContainerResources): Int {
        var size = value.unknownFields.size
        if (value.cpu_period != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(1,
            value.cpu_period)
        if (value.cpu_quota != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(2, value.cpu_quota)
        if (value.cpu_shares != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(3,
            value.cpu_shares)
        if (value.memory_limit_in_bytes != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(4,
            value.memory_limit_in_bytes)
        if (value.oom_score_adj != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(5,
            value.oom_score_adj)
        if (value.cpuset_cpus != "") size += ProtoAdapter.STRING.encodedSizeWithTag(6,
            value.cpuset_cpus)
        if (value.cpuset_mems != "") size += ProtoAdapter.STRING.encodedSizeWithTag(7,
            value.cpuset_mems)
        size += HugepageLimit.ADAPTER.asRepeated().encodedSizeWithTag(8, value.hugepage_limits)
        return size
      }

      override fun encode(writer: ProtoWriter, value: LinuxContainerResources) {
        if (value.cpu_period != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.cpu_period)
        if (value.cpu_quota != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.cpu_quota)
        if (value.cpu_shares != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.cpu_shares)
        if (value.memory_limit_in_bytes != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4,
            value.memory_limit_in_bytes)
        if (value.oom_score_adj != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 5,
            value.oom_score_adj)
        if (value.cpuset_cpus != "") ProtoAdapter.STRING.encodeWithTag(writer, 6, value.cpuset_cpus)
        if (value.cpuset_mems != "") ProtoAdapter.STRING.encodeWithTag(writer, 7, value.cpuset_mems)
        HugepageLimit.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.hugepage_limits)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): LinuxContainerResources {
        var cpu_period: Long = 0L
        var cpu_quota: Long = 0L
        var cpu_shares: Long = 0L
        var memory_limit_in_bytes: Long = 0L
        var oom_score_adj: Long = 0L
        var cpuset_cpus: String = ""
        var cpuset_mems: String = ""
        val hugepage_limits = mutableListOf<HugepageLimit>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> cpu_period = ProtoAdapter.INT64.decode(reader)
            2 -> cpu_quota = ProtoAdapter.INT64.decode(reader)
            3 -> cpu_shares = ProtoAdapter.INT64.decode(reader)
            4 -> memory_limit_in_bytes = ProtoAdapter.INT64.decode(reader)
            5 -> oom_score_adj = ProtoAdapter.INT64.decode(reader)
            6 -> cpuset_cpus = ProtoAdapter.STRING.decode(reader)
            7 -> cpuset_mems = ProtoAdapter.STRING.decode(reader)
            8 -> hugepage_limits.add(HugepageLimit.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return LinuxContainerResources(
          cpu_period = cpu_period,
          cpu_quota = cpu_quota,
          cpu_shares = cpu_shares,
          memory_limit_in_bytes = memory_limit_in_bytes,
          oom_score_adj = oom_score_adj,
          cpuset_cpus = cpuset_cpus,
          cpuset_mems = cpuset_mems,
          hugepage_limits = hugepage_limits,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: LinuxContainerResources): LinuxContainerResources = value.copy(
        hugepage_limits = value.hugepage_limits.redactElements(HugepageLimit.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
