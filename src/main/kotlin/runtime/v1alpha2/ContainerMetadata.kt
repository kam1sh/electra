// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.ContainerMetadata in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * ContainerMetadata holds all necessary information for building the container
 * name. The container runtime is encouraged to expose the metadata in its user
 * interface for better user experience. E.g., runtime can construct a unique
 * container name based on the metadata. Note that (name, attempt) is unique
 * within a sandbox for the entire lifetime of the sandbox.
 */
class ContainerMetadata(
  /**
   * Name of the container. Same as the container name in the PodSpec.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val name: String = "",
  /**
   * Attempt number of creating the container. Default: 0.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  val attempt: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ContainerMetadata, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ContainerMetadata) return false
    if (unknownFields != other.unknownFields) return false
    if (name != other.name) return false
    if (attempt != other.attempt) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + name.hashCode()
      result = result * 37 + attempt.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """name=${sanitize(name)}"""
    result += """attempt=$attempt"""
    return result.joinToString(prefix = "ContainerMetadata{", separator = ", ", postfix = "}")
  }

  fun copy(
    name: String = this.name,
    attempt: Int = this.attempt,
    unknownFields: ByteString = this.unknownFields
  ): ContainerMetadata = ContainerMetadata(name, attempt, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<ContainerMetadata> = object : ProtoAdapter<ContainerMetadata>(
      FieldEncoding.LENGTH_DELIMITED, 
      ContainerMetadata::class, 
      "type.googleapis.com/runtime.v1alpha2.ContainerMetadata", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: ContainerMetadata): Int {
        var size = value.unknownFields.size
        if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
        if (value.attempt != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(2, value.attempt)
        return size
      }

      override fun encode(writer: ProtoWriter, value: ContainerMetadata) {
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
        if (value.attempt != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.attempt)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): ContainerMetadata {
        var name: String = ""
        var attempt: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> name = ProtoAdapter.STRING.decode(reader)
            2 -> attempt = ProtoAdapter.UINT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ContainerMetadata(
          name = name,
          attempt = attempt,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: ContainerMetadata): ContainerMetadata = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
