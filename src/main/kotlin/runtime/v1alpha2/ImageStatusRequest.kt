// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.ImageStatusRequest in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class ImageStatusRequest(
  /**
   * Spec of the image.
   */
  @field:WireField(
    tag = 1,
    adapter = "runtime.v1alpha2.ImageSpec#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val image: ImageSpec? = null,
  /**
   * Verbose indicates whether to return extra information about the image.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  val verbose: Boolean = false,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ImageStatusRequest, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ImageStatusRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (image != other.image) return false
    if (verbose != other.verbose) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + image.hashCode()
      result = result * 37 + verbose.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (image != null) result += """image=$image"""
    result += """verbose=$verbose"""
    return result.joinToString(prefix = "ImageStatusRequest{", separator = ", ", postfix = "}")
  }

  fun copy(
    image: ImageSpec? = this.image,
    verbose: Boolean = this.verbose,
    unknownFields: ByteString = this.unknownFields
  ): ImageStatusRequest = ImageStatusRequest(image, verbose, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<ImageStatusRequest> = object : ProtoAdapter<ImageStatusRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      ImageStatusRequest::class, 
      "type.googleapis.com/runtime.v1alpha2.ImageStatusRequest", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: ImageStatusRequest): Int {
        var size = value.unknownFields.size
        if (value.image != null) size += ImageSpec.ADAPTER.encodedSizeWithTag(1, value.image)
        if (value.verbose != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(2, value.verbose)
        return size
      }

      override fun encode(writer: ProtoWriter, value: ImageStatusRequest) {
        if (value.image != null) ImageSpec.ADAPTER.encodeWithTag(writer, 1, value.image)
        if (value.verbose != false) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.verbose)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): ImageStatusRequest {
        var image: ImageSpec? = null
        var verbose: Boolean = false
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> image = ImageSpec.ADAPTER.decode(reader)
            2 -> verbose = ProtoAdapter.BOOL.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ImageStatusRequest(
          image = image,
          verbose = verbose,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: ImageStatusRequest): ImageStatusRequest = value.copy(
        image = value.image?.let(ImageSpec.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
