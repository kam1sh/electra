// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.ContainerStatus in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.lazy
import okio.ByteString

/**
 * ContainerStatus represents the status of a container.
 */
class ContainerStatus(
  /**
   * ID of the container.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val id: String = "",
  /**
   * Metadata of the container.
   */
  @field:WireField(
    tag = 2,
    adapter = "runtime.v1alpha2.ContainerMetadata#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val metadata: ContainerMetadata? = null,
  /**
   * Status of the container.
   */
  @field:WireField(
    tag = 3,
    adapter = "runtime.v1alpha2.ContainerState#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val state: ContainerState = ContainerState.CONTAINER_CREATED,
  /**
   * Creation time of the container in nanoseconds.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "createdAt"
  )
  val created_at: Long = 0L,
  /**
   * Start time of the container in nanoseconds. Default: 0 (not specified).
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "startedAt"
  )
  val started_at: Long = 0L,
  /**
   * Finish time of the container in nanoseconds. Default: 0 (not specified).
   */
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "finishedAt"
  )
  val finished_at: Long = 0L,
  /**
   * Exit code of the container. Only required when finished_at != 0. Default: 0.
   */
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "exitCode"
  )
  val exit_code: Int = 0,
  /**
   * Spec of the image.
   */
  @field:WireField(
    tag = 8,
    adapter = "runtime.v1alpha2.ImageSpec#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val image: ImageSpec? = null,
  /**
   * Reference to the image in use. For most runtimes, this should be an
   * image ID
   */
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "imageRef"
  )
  val image_ref: String = "",
  /**
   * Brief CamelCase string explaining why container is in its current state.
   */
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val reason: String = "",
  /**
   * Human-readable message indicating details about why container is in its
   * current state.
   */
  @field:WireField(
    tag = 11,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val message: String = "",
  labels: Map<String, String> = emptyMap(),
  annotations: Map<String, String> = emptyMap(),
  mounts: List<Mount> = emptyList(),
  /**
   * Log path of container.
   */
  @field:WireField(
    tag = 15,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "logPath"
  )
  val log_path: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ContainerStatus, Nothing>(ADAPTER, unknownFields) {
  /**
   * Key-value pairs that may be used to scope and select individual resources.
   */
  @field:WireField(
    tag = 12,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val labels: Map<String, String> = immutableCopyOf("labels", labels)

  /**
   * Unstructured key-value map holding arbitrary metadata.
   * Annotations MUST NOT be altered by the runtime; the value of this field
   * MUST be identical to that of the corresponding ContainerConfig used to
   * instantiate the Container this status represents.
   */
  @field:WireField(
    tag = 13,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val annotations: Map<String, String> = immutableCopyOf("annotations", annotations)

  /**
   * Mounts for the container.
   */
  @field:WireField(
    tag = 14,
    adapter = "runtime.v1alpha2.Mount#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val mounts: List<Mount> = immutableCopyOf("mounts", mounts)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ContainerStatus) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (metadata != other.metadata) return false
    if (state != other.state) return false
    if (created_at != other.created_at) return false
    if (started_at != other.started_at) return false
    if (finished_at != other.finished_at) return false
    if (exit_code != other.exit_code) return false
    if (image != other.image) return false
    if (image_ref != other.image_ref) return false
    if (reason != other.reason) return false
    if (message != other.message) return false
    if (labels != other.labels) return false
    if (annotations != other.annotations) return false
    if (mounts != other.mounts) return false
    if (log_path != other.log_path) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + metadata.hashCode()
      result = result * 37 + state.hashCode()
      result = result * 37 + created_at.hashCode()
      result = result * 37 + started_at.hashCode()
      result = result * 37 + finished_at.hashCode()
      result = result * 37 + exit_code.hashCode()
      result = result * 37 + image.hashCode()
      result = result * 37 + image_ref.hashCode()
      result = result * 37 + reason.hashCode()
      result = result * 37 + message.hashCode()
      result = result * 37 + labels.hashCode()
      result = result * 37 + annotations.hashCode()
      result = result * 37 + mounts.hashCode()
      result = result * 37 + log_path.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    if (metadata != null) result += """metadata=$metadata"""
    result += """state=$state"""
    result += """created_at=$created_at"""
    result += """started_at=$started_at"""
    result += """finished_at=$finished_at"""
    result += """exit_code=$exit_code"""
    if (image != null) result += """image=$image"""
    result += """image_ref=${sanitize(image_ref)}"""
    result += """reason=${sanitize(reason)}"""
    result += """message=${sanitize(message)}"""
    if (labels.isNotEmpty()) result += """labels=$labels"""
    if (annotations.isNotEmpty()) result += """annotations=$annotations"""
    if (mounts.isNotEmpty()) result += """mounts=$mounts"""
    result += """log_path=${sanitize(log_path)}"""
    return result.joinToString(prefix = "ContainerStatus{", separator = ", ", postfix = "}")
  }

  fun copy(
    id: String = this.id,
    metadata: ContainerMetadata? = this.metadata,
    state: ContainerState = this.state,
    created_at: Long = this.created_at,
    started_at: Long = this.started_at,
    finished_at: Long = this.finished_at,
    exit_code: Int = this.exit_code,
    image: ImageSpec? = this.image,
    image_ref: String = this.image_ref,
    reason: String = this.reason,
    message: String = this.message,
    labels: Map<String, String> = this.labels,
    annotations: Map<String, String> = this.annotations,
    mounts: List<Mount> = this.mounts,
    log_path: String = this.log_path,
    unknownFields: ByteString = this.unknownFields
  ): ContainerStatus = ContainerStatus(id, metadata, state, created_at, started_at, finished_at,
      exit_code, image, image_ref, reason, message, labels, annotations, mounts, log_path,
      unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<ContainerStatus> = object : ProtoAdapter<ContainerStatus>(
      FieldEncoding.LENGTH_DELIMITED, 
      ContainerStatus::class, 
      "type.googleapis.com/runtime.v1alpha2.ContainerStatus", 
      PROTO_3, 
      null
    ) {
      private val labelsAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      private val annotationsAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      override fun encodedSize(value: ContainerStatus): Int {
        var size = value.unknownFields.size
        if (value.id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        if (value.metadata != null) size += ContainerMetadata.ADAPTER.encodedSizeWithTag(2,
            value.metadata)
        if (value.state != ContainerState.CONTAINER_CREATED) size +=
            ContainerState.ADAPTER.encodedSizeWithTag(3, value.state)
        if (value.created_at != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(4,
            value.created_at)
        if (value.started_at != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(5,
            value.started_at)
        if (value.finished_at != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(6,
            value.finished_at)
        if (value.exit_code != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(7, value.exit_code)
        if (value.image != null) size += ImageSpec.ADAPTER.encodedSizeWithTag(8, value.image)
        if (value.image_ref != "") size += ProtoAdapter.STRING.encodedSizeWithTag(9,
            value.image_ref)
        if (value.reason != "") size += ProtoAdapter.STRING.encodedSizeWithTag(10, value.reason)
        if (value.message != "") size += ProtoAdapter.STRING.encodedSizeWithTag(11, value.message)
        size += labelsAdapter.encodedSizeWithTag(12, value.labels)
        size += annotationsAdapter.encodedSizeWithTag(13, value.annotations)
        size += Mount.ADAPTER.asRepeated().encodedSizeWithTag(14, value.mounts)
        if (value.log_path != "") size += ProtoAdapter.STRING.encodedSizeWithTag(15, value.log_path)
        return size
      }

      override fun encode(writer: ProtoWriter, value: ContainerStatus) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        if (value.metadata != null) ContainerMetadata.ADAPTER.encodeWithTag(writer, 2,
            value.metadata)
        if (value.state != ContainerState.CONTAINER_CREATED)
            ContainerState.ADAPTER.encodeWithTag(writer, 3, value.state)
        if (value.created_at != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.created_at)
        if (value.started_at != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 5, value.started_at)
        if (value.finished_at != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 6, value.finished_at)
        if (value.exit_code != 0) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.exit_code)
        if (value.image != null) ImageSpec.ADAPTER.encodeWithTag(writer, 8, value.image)
        if (value.image_ref != "") ProtoAdapter.STRING.encodeWithTag(writer, 9, value.image_ref)
        if (value.reason != "") ProtoAdapter.STRING.encodeWithTag(writer, 10, value.reason)
        if (value.message != "") ProtoAdapter.STRING.encodeWithTag(writer, 11, value.message)
        labelsAdapter.encodeWithTag(writer, 12, value.labels)
        annotationsAdapter.encodeWithTag(writer, 13, value.annotations)
        Mount.ADAPTER.asRepeated().encodeWithTag(writer, 14, value.mounts)
        if (value.log_path != "") ProtoAdapter.STRING.encodeWithTag(writer, 15, value.log_path)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): ContainerStatus {
        var id: String = ""
        var metadata: ContainerMetadata? = null
        var state: ContainerState = ContainerState.CONTAINER_CREATED
        var created_at: Long = 0L
        var started_at: Long = 0L
        var finished_at: Long = 0L
        var exit_code: Int = 0
        var image: ImageSpec? = null
        var image_ref: String = ""
        var reason: String = ""
        var message: String = ""
        val labels = mutableMapOf<String, String>()
        val annotations = mutableMapOf<String, String>()
        val mounts = mutableListOf<Mount>()
        var log_path: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> metadata = ContainerMetadata.ADAPTER.decode(reader)
            3 -> try {
              state = ContainerState.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            4 -> created_at = ProtoAdapter.INT64.decode(reader)
            5 -> started_at = ProtoAdapter.INT64.decode(reader)
            6 -> finished_at = ProtoAdapter.INT64.decode(reader)
            7 -> exit_code = ProtoAdapter.INT32.decode(reader)
            8 -> image = ImageSpec.ADAPTER.decode(reader)
            9 -> image_ref = ProtoAdapter.STRING.decode(reader)
            10 -> reason = ProtoAdapter.STRING.decode(reader)
            11 -> message = ProtoAdapter.STRING.decode(reader)
            12 -> labels.putAll(labelsAdapter.decode(reader))
            13 -> annotations.putAll(annotationsAdapter.decode(reader))
            14 -> mounts.add(Mount.ADAPTER.decode(reader))
            15 -> log_path = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ContainerStatus(
          id = id,
          metadata = metadata,
          state = state,
          created_at = created_at,
          started_at = started_at,
          finished_at = finished_at,
          exit_code = exit_code,
          image = image,
          image_ref = image_ref,
          reason = reason,
          message = message,
          labels = labels,
          annotations = annotations,
          mounts = mounts,
          log_path = log_path,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: ContainerStatus): ContainerStatus = value.copy(
        metadata = value.metadata?.let(ContainerMetadata.ADAPTER::redact),
        image = value.image?.let(ImageSpec.ADAPTER::redact),
        mounts = value.mounts.redactElements(Mount.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
