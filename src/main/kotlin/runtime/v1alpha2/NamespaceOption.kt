// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.NamespaceOption in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * NamespaceOption provides options for Linux namespaces.
 */
class NamespaceOption(
  /**
   * Network namespace for this container/sandbox.
   * Note: There is currently no way to set CONTAINER scoped network in the Kubernetes API.
   * Namespaces currently set by the kubelet: POD, NODE
   */
  @field:WireField(
    tag = 1,
    adapter = "runtime.v1alpha2.NamespaceMode#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val network: NamespaceMode = NamespaceMode.POD,
  /**
   * PID namespace for this container/sandbox.
   * Note: The CRI default is POD, but the v1.PodSpec default is CONTAINER.
   * The kubelet's runtime manager will set this to CONTAINER explicitly for v1 pods.
   * Namespaces currently set by the kubelet: POD, CONTAINER, NODE, TARGET
   */
  @field:WireField(
    tag = 2,
    adapter = "runtime.v1alpha2.NamespaceMode#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val pid: NamespaceMode = NamespaceMode.POD,
  /**
   * IPC namespace for this container/sandbox.
   * Note: There is currently no way to set CONTAINER scoped IPC in the Kubernetes API.
   * Namespaces currently set by the kubelet: POD, NODE
   */
  @field:WireField(
    tag = 3,
    adapter = "runtime.v1alpha2.NamespaceMode#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val ipc: NamespaceMode = NamespaceMode.POD,
  /**
   * Target Container ID for NamespaceMode of TARGET. This container must have been
   * previously created in the same pod. It is not possible to specify different targets
   * for each namespace.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "targetId"
  )
  val target_id: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<NamespaceOption, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is NamespaceOption) return false
    if (unknownFields != other.unknownFields) return false
    if (network != other.network) return false
    if (pid != other.pid) return false
    if (ipc != other.ipc) return false
    if (target_id != other.target_id) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + network.hashCode()
      result = result * 37 + pid.hashCode()
      result = result * 37 + ipc.hashCode()
      result = result * 37 + target_id.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """network=$network"""
    result += """pid=$pid"""
    result += """ipc=$ipc"""
    result += """target_id=${sanitize(target_id)}"""
    return result.joinToString(prefix = "NamespaceOption{", separator = ", ", postfix = "}")
  }

  fun copy(
    network: NamespaceMode = this.network,
    pid: NamespaceMode = this.pid,
    ipc: NamespaceMode = this.ipc,
    target_id: String = this.target_id,
    unknownFields: ByteString = this.unknownFields
  ): NamespaceOption = NamespaceOption(network, pid, ipc, target_id, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<NamespaceOption> = object : ProtoAdapter<NamespaceOption>(
      FieldEncoding.LENGTH_DELIMITED, 
      NamespaceOption::class, 
      "type.googleapis.com/runtime.v1alpha2.NamespaceOption", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: NamespaceOption): Int {
        var size = value.unknownFields.size
        if (value.network != NamespaceMode.POD) size += NamespaceMode.ADAPTER.encodedSizeWithTag(1,
            value.network)
        if (value.pid != NamespaceMode.POD) size += NamespaceMode.ADAPTER.encodedSizeWithTag(2,
            value.pid)
        if (value.ipc != NamespaceMode.POD) size += NamespaceMode.ADAPTER.encodedSizeWithTag(3,
            value.ipc)
        if (value.target_id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4,
            value.target_id)
        return size
      }

      override fun encode(writer: ProtoWriter, value: NamespaceOption) {
        if (value.network != NamespaceMode.POD) NamespaceMode.ADAPTER.encodeWithTag(writer, 1,
            value.network)
        if (value.pid != NamespaceMode.POD) NamespaceMode.ADAPTER.encodeWithTag(writer, 2,
            value.pid)
        if (value.ipc != NamespaceMode.POD) NamespaceMode.ADAPTER.encodeWithTag(writer, 3,
            value.ipc)
        if (value.target_id != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.target_id)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): NamespaceOption {
        var network: NamespaceMode = NamespaceMode.POD
        var pid: NamespaceMode = NamespaceMode.POD
        var ipc: NamespaceMode = NamespaceMode.POD
        var target_id: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              network = NamespaceMode.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> try {
              pid = NamespaceMode.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            3 -> try {
              ipc = NamespaceMode.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            4 -> target_id = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return NamespaceOption(
          network = network,
          pid = pid,
          ipc = ipc,
          target_id = target_id,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: NamespaceOption): NamespaceOption = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
