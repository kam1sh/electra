// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.Mount in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Mount specifies a host volume to mount into a container.
 */
class Mount(
  /**
   * Path of the mount within the container.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "containerPath"
  )
  val container_path: String = "",
  /**
   * Path of the mount on the host. If the hostPath doesn't exist, then runtimes
   * should report error. If the hostpath is a symbolic link, runtimes should
   * follow the symlink and mount the real destination to container.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "hostPath"
  )
  val host_path: String = "",
  /**
   * If set, the mount is read-only.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  val readonly: Boolean = false,
  /**
   * If set, the mount needs SELinux relabeling.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "selinuxRelabel"
  )
  val selinux_relabel: Boolean = false,
  /**
   * Requested propagation mode.
   */
  @field:WireField(
    tag = 5,
    adapter = "runtime.v1alpha2.MountPropagation#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val propagation: MountPropagation = MountPropagation.PROPAGATION_PRIVATE,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Mount, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Mount) return false
    if (unknownFields != other.unknownFields) return false
    if (container_path != other.container_path) return false
    if (host_path != other.host_path) return false
    if (readonly != other.readonly) return false
    if (selinux_relabel != other.selinux_relabel) return false
    if (propagation != other.propagation) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + container_path.hashCode()
      result = result * 37 + host_path.hashCode()
      result = result * 37 + readonly.hashCode()
      result = result * 37 + selinux_relabel.hashCode()
      result = result * 37 + propagation.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """container_path=${sanitize(container_path)}"""
    result += """host_path=${sanitize(host_path)}"""
    result += """readonly=$readonly"""
    result += """selinux_relabel=$selinux_relabel"""
    result += """propagation=$propagation"""
    return result.joinToString(prefix = "Mount{", separator = ", ", postfix = "}")
  }

  fun copy(
    container_path: String = this.container_path,
    host_path: String = this.host_path,
    readonly: Boolean = this.readonly,
    selinux_relabel: Boolean = this.selinux_relabel,
    propagation: MountPropagation = this.propagation,
    unknownFields: ByteString = this.unknownFields
  ): Mount = Mount(container_path, host_path, readonly, selinux_relabel, propagation, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Mount> = object : ProtoAdapter<Mount>(
      FieldEncoding.LENGTH_DELIMITED, 
      Mount::class, 
      "type.googleapis.com/runtime.v1alpha2.Mount", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: Mount): Int {
        var size = value.unknownFields.size
        if (value.container_path != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.container_path)
        if (value.host_path != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.host_path)
        if (value.readonly != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(3, value.readonly)
        if (value.selinux_relabel != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(4,
            value.selinux_relabel)
        if (value.propagation != MountPropagation.PROPAGATION_PRIVATE) size +=
            MountPropagation.ADAPTER.encodedSizeWithTag(5, value.propagation)
        return size
      }

      override fun encode(writer: ProtoWriter, value: Mount) {
        if (value.container_path != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.container_path)
        if (value.host_path != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.host_path)
        if (value.readonly != false) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.readonly)
        if (value.selinux_relabel != false) ProtoAdapter.BOOL.encodeWithTag(writer, 4,
            value.selinux_relabel)
        if (value.propagation != MountPropagation.PROPAGATION_PRIVATE)
            MountPropagation.ADAPTER.encodeWithTag(writer, 5, value.propagation)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Mount {
        var container_path: String = ""
        var host_path: String = ""
        var readonly: Boolean = false
        var selinux_relabel: Boolean = false
        var propagation: MountPropagation = MountPropagation.PROPAGATION_PRIVATE
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> container_path = ProtoAdapter.STRING.decode(reader)
            2 -> host_path = ProtoAdapter.STRING.decode(reader)
            3 -> readonly = ProtoAdapter.BOOL.decode(reader)
            4 -> selinux_relabel = ProtoAdapter.BOOL.decode(reader)
            5 -> try {
              propagation = MountPropagation.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return Mount(
          container_path = container_path,
          host_path = host_path,
          readonly = readonly,
          selinux_relabel = selinux_relabel,
          propagation = propagation,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Mount): Mount = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
