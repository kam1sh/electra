// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.HugepageLimit in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * HugepageLimit corresponds to the file`hugetlb.<hugepagesize>.limit_in_byte` in container level
 * cgroup.
 * For example, `PageSize=1GB`, `Limit=1073741824` means setting `1073741824` bytes to
 * hugetlb.1GB.limit_in_bytes.
 */
class HugepageLimit(
  /**
   * The value of PageSize has the format <size><unit-prefix>B (2MB, 1GB),
   * and must match the <hugepagesize> of the corresponding control file found in
   * `hugetlb.<hugepagesize>.limit_in_bytes`.
   * The values of <unit-prefix> are intended to be parsed using base 1024("1KB" = 1024, "1MB" =
   * 1048576, etc).
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "pageSize"
  )
  val page_size: String = "",
  /**
   * limit in bytes of hugepagesize HugeTLB usage.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  val limit: Long = 0L,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<HugepageLimit, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is HugepageLimit) return false
    if (unknownFields != other.unknownFields) return false
    if (page_size != other.page_size) return false
    if (limit != other.limit) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + page_size.hashCode()
      result = result * 37 + limit.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """page_size=${sanitize(page_size)}"""
    result += """limit=$limit"""
    return result.joinToString(prefix = "HugepageLimit{", separator = ", ", postfix = "}")
  }

  fun copy(
    page_size: String = this.page_size,
    limit: Long = this.limit,
    unknownFields: ByteString = this.unknownFields
  ): HugepageLimit = HugepageLimit(page_size, limit, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<HugepageLimit> = object : ProtoAdapter<HugepageLimit>(
      FieldEncoding.LENGTH_DELIMITED, 
      HugepageLimit::class, 
      "type.googleapis.com/runtime.v1alpha2.HugepageLimit", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: HugepageLimit): Int {
        var size = value.unknownFields.size
        if (value.page_size != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.page_size)
        if (value.limit != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(2, value.limit)
        return size
      }

      override fun encode(writer: ProtoWriter, value: HugepageLimit) {
        if (value.page_size != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.page_size)
        if (value.limit != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.limit)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): HugepageLimit {
        var page_size: String = ""
        var limit: Long = 0L
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> page_size = ProtoAdapter.STRING.decode(reader)
            2 -> limit = ProtoAdapter.UINT64.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return HugepageLimit(
          page_size = page_size,
          limit = limit,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: HugepageLimit): HugepageLimit = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
