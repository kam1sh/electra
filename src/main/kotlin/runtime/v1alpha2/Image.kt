// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.Image in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Basic information about a container image.
 */
class Image(
  /**
   * ID of the image.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val id: String = "",
  repo_tags: List<String> = emptyList(),
  repo_digests: List<String> = emptyList(),
  /**
   * Size of the image in bytes. Must be > 0.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  val size: Long = 0L,
  /**
   * UID that will run the command(s). This is used as a default if no user is
   * specified when creating the container. UID and the following user name
   * are mutually exclusive.
   */
  @field:WireField(
    tag = 5,
    adapter = "runtime.v1alpha2.Int64Value#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val uid: Int64Value? = null,
  /**
   * User name that will run the command(s). This is used if UID is not set
   * and no user is specified when creating container.
   */
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val username: String = "",
  /**
   * ImageSpec for image which includes annotations
   */
  @field:WireField(
    tag = 7,
    adapter = "runtime.v1alpha2.ImageSpec#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val spec: ImageSpec? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Image, Nothing>(ADAPTER, unknownFields) {
  /**
   * Other names by which this image is known.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    jsonName = "repoTags"
  )
  val repo_tags: List<String> = immutableCopyOf("repo_tags", repo_tags)

  /**
   * Digests by which this image is known.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    jsonName = "repoDigests"
  )
  val repo_digests: List<String> = immutableCopyOf("repo_digests", repo_digests)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Image) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (repo_tags != other.repo_tags) return false
    if (repo_digests != other.repo_digests) return false
    if (size != other.size) return false
    if (uid != other.uid) return false
    if (username != other.username) return false
    if (spec != other.spec) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + repo_tags.hashCode()
      result = result * 37 + repo_digests.hashCode()
      result = result * 37 + size.hashCode()
      result = result * 37 + uid.hashCode()
      result = result * 37 + username.hashCode()
      result = result * 37 + spec.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    if (repo_tags.isNotEmpty()) result += """repo_tags=${sanitize(repo_tags)}"""
    if (repo_digests.isNotEmpty()) result += """repo_digests=${sanitize(repo_digests)}"""
    result += """size=$size"""
    if (uid != null) result += """uid=$uid"""
    result += """username=${sanitize(username)}"""
    if (spec != null) result += """spec=$spec"""
    return result.joinToString(prefix = "Image{", separator = ", ", postfix = "}")
  }

  fun copy(
    id: String = this.id,
    repo_tags: List<String> = this.repo_tags,
    repo_digests: List<String> = this.repo_digests,
    size: Long = this.size,
    uid: Int64Value? = this.uid,
    username: String = this.username,
    spec: ImageSpec? = this.spec,
    unknownFields: ByteString = this.unknownFields
  ): Image = Image(id, repo_tags, repo_digests, size, uid, username, spec, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Image> = object : ProtoAdapter<Image>(
      FieldEncoding.LENGTH_DELIMITED, 
      Image::class, 
      "type.googleapis.com/runtime.v1alpha2.Image", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: Image): Int {
        var size_ = value.unknownFields.size
        if (value.id != "") size_ += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        size_ += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(2, value.repo_tags)
        size_ += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.repo_digests)
        if (value.size != 0L) size_ += ProtoAdapter.UINT64.encodedSizeWithTag(4, value.size)
        if (value.uid != null) size_ += Int64Value.ADAPTER.encodedSizeWithTag(5, value.uid)
        if (value.username != "") size_ += ProtoAdapter.STRING.encodedSizeWithTag(6, value.username)
        if (value.spec != null) size_ += ImageSpec.ADAPTER.encodedSizeWithTag(7, value.spec)
        return size_
      }

      override fun encode(writer: ProtoWriter, value: Image) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.repo_tags)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.repo_digests)
        if (value.size != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.size)
        if (value.uid != null) Int64Value.ADAPTER.encodeWithTag(writer, 5, value.uid)
        if (value.username != "") ProtoAdapter.STRING.encodeWithTag(writer, 6, value.username)
        if (value.spec != null) ImageSpec.ADAPTER.encodeWithTag(writer, 7, value.spec)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Image {
        var id: String = ""
        val repo_tags = mutableListOf<String>()
        val repo_digests = mutableListOf<String>()
        var size: Long = 0L
        var uid: Int64Value? = null
        var username: String = ""
        var spec: ImageSpec? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> repo_tags.add(ProtoAdapter.STRING.decode(reader))
            3 -> repo_digests.add(ProtoAdapter.STRING.decode(reader))
            4 -> size = ProtoAdapter.UINT64.decode(reader)
            5 -> uid = Int64Value.ADAPTER.decode(reader)
            6 -> username = ProtoAdapter.STRING.decode(reader)
            7 -> spec = ImageSpec.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Image(
          id = id,
          repo_tags = repo_tags,
          repo_digests = repo_digests,
          size = size,
          uid = uid,
          username = username,
          spec = spec,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Image): Image = value.copy(
        uid = value.uid?.let(Int64Value.ADAPTER::redact),
        spec = value.spec?.let(ImageSpec.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
