// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.SELinuxOption in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * SELinuxOption are the labels to be applied to the container.
 */
class SELinuxOption(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val user: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val role: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val type: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val level: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<SELinuxOption, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SELinuxOption) return false
    if (unknownFields != other.unknownFields) return false
    if (user != other.user) return false
    if (role != other.role) return false
    if (type != other.type) return false
    if (level != other.level) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + user.hashCode()
      result = result * 37 + role.hashCode()
      result = result * 37 + type.hashCode()
      result = result * 37 + level.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """user=${sanitize(user)}"""
    result += """role=${sanitize(role)}"""
    result += """type=${sanitize(type)}"""
    result += """level=${sanitize(level)}"""
    return result.joinToString(prefix = "SELinuxOption{", separator = ", ", postfix = "}")
  }

  fun copy(
    user: String = this.user,
    role: String = this.role,
    type: String = this.type,
    level: String = this.level,
    unknownFields: ByteString = this.unknownFields
  ): SELinuxOption = SELinuxOption(user, role, type, level, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<SELinuxOption> = object : ProtoAdapter<SELinuxOption>(
      FieldEncoding.LENGTH_DELIMITED, 
      SELinuxOption::class, 
      "type.googleapis.com/runtime.v1alpha2.SELinuxOption", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: SELinuxOption): Int {
        var size = value.unknownFields.size
        if (value.user != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.user)
        if (value.role != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.role)
        if (value.type != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.type)
        if (value.level != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.level)
        return size
      }

      override fun encode(writer: ProtoWriter, value: SELinuxOption) {
        if (value.user != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.user)
        if (value.role != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.role)
        if (value.type != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.type)
        if (value.level != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.level)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): SELinuxOption {
        var user: String = ""
        var role: String = ""
        var type: String = ""
        var level: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> user = ProtoAdapter.STRING.decode(reader)
            2 -> role = ProtoAdapter.STRING.decode(reader)
            3 -> type = ProtoAdapter.STRING.decode(reader)
            4 -> level = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return SELinuxOption(
          user = user,
          role = role,
          type = type,
          level = level,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: SELinuxOption): SELinuxOption = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
