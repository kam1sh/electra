// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.PodSandboxStatus in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.Map
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.lazy
import okio.ByteString

/**
 * PodSandboxStatus contains the status of the PodSandbox.
 */
class PodSandboxStatus(
  /**
   * ID of the sandbox.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val id: String = "",
  /**
   * Metadata of the sandbox.
   */
  @field:WireField(
    tag = 2,
    adapter = "runtime.v1alpha2.PodSandboxMetadata#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val metadata: PodSandboxMetadata? = null,
  /**
   * State of the sandbox.
   */
  @field:WireField(
    tag = 3,
    adapter = "runtime.v1alpha2.PodSandboxState#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val state: PodSandboxState = PodSandboxState.SANDBOX_READY,
  /**
   * Creation timestamp of the sandbox in nanoseconds. Must be > 0.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "createdAt"
  )
  val created_at: Long = 0L,
  /**
   * Network contains network status if network is handled by the runtime.
   */
  @field:WireField(
    tag = 5,
    adapter = "runtime.v1alpha2.PodSandboxNetworkStatus#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val network: PodSandboxNetworkStatus? = null,
  /**
   * Linux-specific status to a pod sandbox.
   */
  @field:WireField(
    tag = 6,
    adapter = "runtime.v1alpha2.LinuxPodSandboxStatus#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val linux: LinuxPodSandboxStatus? = null,
  labels: Map<String, String> = emptyMap(),
  annotations: Map<String, String> = emptyMap(),
  /**
   * runtime configuration used for this PodSandbox.
   */
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "runtimeHandler"
  )
  val runtime_handler: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<PodSandboxStatus, Nothing>(ADAPTER, unknownFields) {
  /**
   * Labels are key-value pairs that may be used to scope and select individual resources.
   */
  @field:WireField(
    tag = 7,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val labels: Map<String, String> = immutableCopyOf("labels", labels)

  /**
   * Unstructured key-value map holding arbitrary metadata.
   * Annotations MUST NOT be altered by the runtime; the value of this field
   * MUST be identical to that of the corresponding PodSandboxConfig used to
   * instantiate the pod sandbox this status represents.
   */
  @field:WireField(
    tag = 8,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val annotations: Map<String, String> = immutableCopyOf("annotations", annotations)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is PodSandboxStatus) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (metadata != other.metadata) return false
    if (state != other.state) return false
    if (created_at != other.created_at) return false
    if (network != other.network) return false
    if (linux != other.linux) return false
    if (labels != other.labels) return false
    if (annotations != other.annotations) return false
    if (runtime_handler != other.runtime_handler) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + metadata.hashCode()
      result = result * 37 + state.hashCode()
      result = result * 37 + created_at.hashCode()
      result = result * 37 + network.hashCode()
      result = result * 37 + linux.hashCode()
      result = result * 37 + labels.hashCode()
      result = result * 37 + annotations.hashCode()
      result = result * 37 + runtime_handler.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    if (metadata != null) result += """metadata=$metadata"""
    result += """state=$state"""
    result += """created_at=$created_at"""
    if (network != null) result += """network=$network"""
    if (linux != null) result += """linux=$linux"""
    if (labels.isNotEmpty()) result += """labels=$labels"""
    if (annotations.isNotEmpty()) result += """annotations=$annotations"""
    result += """runtime_handler=${sanitize(runtime_handler)}"""
    return result.joinToString(prefix = "PodSandboxStatus{", separator = ", ", postfix = "}")
  }

  fun copy(
    id: String = this.id,
    metadata: PodSandboxMetadata? = this.metadata,
    state: PodSandboxState = this.state,
    created_at: Long = this.created_at,
    network: PodSandboxNetworkStatus? = this.network,
    linux: LinuxPodSandboxStatus? = this.linux,
    labels: Map<String, String> = this.labels,
    annotations: Map<String, String> = this.annotations,
    runtime_handler: String = this.runtime_handler,
    unknownFields: ByteString = this.unknownFields
  ): PodSandboxStatus = PodSandboxStatus(id, metadata, state, created_at, network, linux, labels,
      annotations, runtime_handler, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<PodSandboxStatus> = object : ProtoAdapter<PodSandboxStatus>(
      FieldEncoding.LENGTH_DELIMITED, 
      PodSandboxStatus::class, 
      "type.googleapis.com/runtime.v1alpha2.PodSandboxStatus", 
      PROTO_3, 
      null
    ) {
      private val labelsAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      private val annotationsAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      override fun encodedSize(value: PodSandboxStatus): Int {
        var size = value.unknownFields.size
        if (value.id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        if (value.metadata != null) size += PodSandboxMetadata.ADAPTER.encodedSizeWithTag(2,
            value.metadata)
        if (value.state != PodSandboxState.SANDBOX_READY) size +=
            PodSandboxState.ADAPTER.encodedSizeWithTag(3, value.state)
        if (value.created_at != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(4,
            value.created_at)
        if (value.network != null) size += PodSandboxNetworkStatus.ADAPTER.encodedSizeWithTag(5,
            value.network)
        if (value.linux != null) size += LinuxPodSandboxStatus.ADAPTER.encodedSizeWithTag(6,
            value.linux)
        size += labelsAdapter.encodedSizeWithTag(7, value.labels)
        size += annotationsAdapter.encodedSizeWithTag(8, value.annotations)
        if (value.runtime_handler != "") size += ProtoAdapter.STRING.encodedSizeWithTag(9,
            value.runtime_handler)
        return size
      }

      override fun encode(writer: ProtoWriter, value: PodSandboxStatus) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        if (value.metadata != null) PodSandboxMetadata.ADAPTER.encodeWithTag(writer, 2,
            value.metadata)
        if (value.state != PodSandboxState.SANDBOX_READY)
            PodSandboxState.ADAPTER.encodeWithTag(writer, 3, value.state)
        if (value.created_at != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.created_at)
        if (value.network != null) PodSandboxNetworkStatus.ADAPTER.encodeWithTag(writer, 5,
            value.network)
        if (value.linux != null) LinuxPodSandboxStatus.ADAPTER.encodeWithTag(writer, 6, value.linux)
        labelsAdapter.encodeWithTag(writer, 7, value.labels)
        annotationsAdapter.encodeWithTag(writer, 8, value.annotations)
        if (value.runtime_handler != "") ProtoAdapter.STRING.encodeWithTag(writer, 9,
            value.runtime_handler)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): PodSandboxStatus {
        var id: String = ""
        var metadata: PodSandboxMetadata? = null
        var state: PodSandboxState = PodSandboxState.SANDBOX_READY
        var created_at: Long = 0L
        var network: PodSandboxNetworkStatus? = null
        var linux: LinuxPodSandboxStatus? = null
        val labels = mutableMapOf<String, String>()
        val annotations = mutableMapOf<String, String>()
        var runtime_handler: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> metadata = PodSandboxMetadata.ADAPTER.decode(reader)
            3 -> try {
              state = PodSandboxState.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            4 -> created_at = ProtoAdapter.INT64.decode(reader)
            5 -> network = PodSandboxNetworkStatus.ADAPTER.decode(reader)
            6 -> linux = LinuxPodSandboxStatus.ADAPTER.decode(reader)
            7 -> labels.putAll(labelsAdapter.decode(reader))
            8 -> annotations.putAll(annotationsAdapter.decode(reader))
            9 -> runtime_handler = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return PodSandboxStatus(
          id = id,
          metadata = metadata,
          state = state,
          created_at = created_at,
          network = network,
          linux = linux,
          labels = labels,
          annotations = annotations,
          runtime_handler = runtime_handler,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: PodSandboxStatus): PodSandboxStatus = value.copy(
        metadata = value.metadata?.let(PodSandboxMetadata.ADAPTER::redact),
        network = value.network?.let(PodSandboxNetworkStatus.ADAPTER::redact),
        linux = value.linux?.let(LinuxPodSandboxStatus.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
