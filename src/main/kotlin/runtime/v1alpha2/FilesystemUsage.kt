// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.FilesystemUsage in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * FilesystemUsage provides the filesystem usage information.
 */
class FilesystemUsage(
  /**
   * Timestamp in nanoseconds at which the information were collected. Must be > 0.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  val timestamp: Long = 0L,
  /**
   * The unique identifier of the filesystem.
   */
  @field:WireField(
    tag = 2,
    adapter = "runtime.v1alpha2.FilesystemIdentifier#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "fsId"
  )
  val fs_id: FilesystemIdentifier? = null,
  /**
   * UsedBytes represents the bytes used for images on the filesystem.
   * This may differ from the total bytes used on the filesystem and may not
   * equal CapacityBytes - AvailableBytes.
   */
  @field:WireField(
    tag = 3,
    adapter = "runtime.v1alpha2.UInt64Value#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "usedBytes"
  )
  val used_bytes: UInt64Value? = null,
  /**
   * InodesUsed represents the inodes used by the images.
   * This may not equal InodesCapacity - InodesAvailable because the underlying
   * filesystem may also be used for purposes other than storing images.
   */
  @field:WireField(
    tag = 4,
    adapter = "runtime.v1alpha2.UInt64Value#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "inodesUsed"
  )
  val inodes_used: UInt64Value? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<FilesystemUsage, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is FilesystemUsage) return false
    if (unknownFields != other.unknownFields) return false
    if (timestamp != other.timestamp) return false
    if (fs_id != other.fs_id) return false
    if (used_bytes != other.used_bytes) return false
    if (inodes_used != other.inodes_used) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + timestamp.hashCode()
      result = result * 37 + fs_id.hashCode()
      result = result * 37 + used_bytes.hashCode()
      result = result * 37 + inodes_used.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """timestamp=$timestamp"""
    if (fs_id != null) result += """fs_id=$fs_id"""
    if (used_bytes != null) result += """used_bytes=$used_bytes"""
    if (inodes_used != null) result += """inodes_used=$inodes_used"""
    return result.joinToString(prefix = "FilesystemUsage{", separator = ", ", postfix = "}")
  }

  fun copy(
    timestamp: Long = this.timestamp,
    fs_id: FilesystemIdentifier? = this.fs_id,
    used_bytes: UInt64Value? = this.used_bytes,
    inodes_used: UInt64Value? = this.inodes_used,
    unknownFields: ByteString = this.unknownFields
  ): FilesystemUsage = FilesystemUsage(timestamp, fs_id, used_bytes, inodes_used, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<FilesystemUsage> = object : ProtoAdapter<FilesystemUsage>(
      FieldEncoding.LENGTH_DELIMITED, 
      FilesystemUsage::class, 
      "type.googleapis.com/runtime.v1alpha2.FilesystemUsage", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: FilesystemUsage): Int {
        var size = value.unknownFields.size
        if (value.timestamp != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(1, value.timestamp)
        if (value.fs_id != null) size += FilesystemIdentifier.ADAPTER.encodedSizeWithTag(2,
            value.fs_id)
        if (value.used_bytes != null) size += UInt64Value.ADAPTER.encodedSizeWithTag(3,
            value.used_bytes)
        if (value.inodes_used != null) size += UInt64Value.ADAPTER.encodedSizeWithTag(4,
            value.inodes_used)
        return size
      }

      override fun encode(writer: ProtoWriter, value: FilesystemUsage) {
        if (value.timestamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.timestamp)
        if (value.fs_id != null) FilesystemIdentifier.ADAPTER.encodeWithTag(writer, 2, value.fs_id)
        if (value.used_bytes != null) UInt64Value.ADAPTER.encodeWithTag(writer, 3, value.used_bytes)
        if (value.inodes_used != null) UInt64Value.ADAPTER.encodeWithTag(writer, 4,
            value.inodes_used)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): FilesystemUsage {
        var timestamp: Long = 0L
        var fs_id: FilesystemIdentifier? = null
        var used_bytes: UInt64Value? = null
        var inodes_used: UInt64Value? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> timestamp = ProtoAdapter.INT64.decode(reader)
            2 -> fs_id = FilesystemIdentifier.ADAPTER.decode(reader)
            3 -> used_bytes = UInt64Value.ADAPTER.decode(reader)
            4 -> inodes_used = UInt64Value.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return FilesystemUsage(
          timestamp = timestamp,
          fs_id = fs_id,
          used_bytes = used_bytes,
          inodes_used = inodes_used,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: FilesystemUsage): FilesystemUsage = value.copy(
        fs_id = value.fs_id?.let(FilesystemIdentifier.ADAPTER::redact),
        used_bytes = value.used_bytes?.let(UInt64Value.ADAPTER::redact),
        inodes_used = value.inodes_used?.let(UInt64Value.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
