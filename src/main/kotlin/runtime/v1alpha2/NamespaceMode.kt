// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.NamespaceMode in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.EnumAdapter
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import kotlin.Int
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic

/**
 * A NamespaceMode describes the intended namespace configuration for each
 * of the namespaces (Network, PID, IPC) in NamespaceOption. Runtimes should
 * map these modes as appropriate for the technology underlying the runtime.
 */
enum class NamespaceMode(
  override val value: Int
) : WireEnum {
  /**
   * A POD namespace is common to all containers in a pod.
   * For example, a container with a PID namespace of POD expects to view
   * all of the processes in all of the containers in the pod.
   */
  POD(0),

  /**
   * A CONTAINER namespace is restricted to a single container.
   * For example, a container with a PID namespace of CONTAINER expects to
   * view only the processes in that container.
   */
  CONTAINER(1),

  /**
   * A NODE namespace is the namespace of the Kubernetes node.
   * For example, a container with a PID namespace of NODE expects to view
   * all of the processes on the host running the kubelet.
   */
  NODE(2),

  /**
   * TARGET targets the namespace of another container. When this is specified,
   * a target_id must be specified in NamespaceOption and refer to a container
   * previously created with NamespaceMode CONTAINER. This containers namespace
   * will be made to match that of container target_id.
   * For example, a container with a PID namespace of TARGET expects to view
   * all of the processes that container target_id can view.
   */
  TARGET(3);

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<NamespaceMode> = object : EnumAdapter<NamespaceMode>(
      NamespaceMode::class, 
      PROTO_3, 
      NamespaceMode.POD
    ) {
      override fun fromValue(value: Int): NamespaceMode? = NamespaceMode.fromValue(value)
    }

    @JvmStatic
    fun fromValue(value: Int): NamespaceMode? = when (value) {
      0 -> POD
      1 -> CONTAINER
      2 -> NODE
      3 -> TARGET
      else -> null
    }
  }
}
