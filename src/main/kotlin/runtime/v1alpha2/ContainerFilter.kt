// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.ContainerFilter in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.Map
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.lazy
import okio.ByteString

/**
 * ContainerFilter is used to filter containers.
 * All those fields are combined with 'AND'
 */
class ContainerFilter(
  /**
   * ID of the container.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val id: String = "",
  /**
   * State of the container.
   */
  @field:WireField(
    tag = 2,
    adapter = "runtime.v1alpha2.ContainerStateValue#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val state: ContainerStateValue? = null,
  /**
   * ID of the PodSandbox.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "podSandboxId"
  )
  val pod_sandbox_id: String = "",
  label_selector: Map<String, String> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ContainerFilter, Nothing>(ADAPTER, unknownFields) {
  /**
   * LabelSelector to select matches.
   * Only api.MatchLabels is supported for now and the requirements
   * are ANDed. MatchExpressions is not supported yet.
   */
  @field:WireField(
    tag = 4,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "labelSelector"
  )
  val label_selector: Map<String, String> = immutableCopyOf("label_selector", label_selector)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ContainerFilter) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (state != other.state) return false
    if (pod_sandbox_id != other.pod_sandbox_id) return false
    if (label_selector != other.label_selector) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + state.hashCode()
      result = result * 37 + pod_sandbox_id.hashCode()
      result = result * 37 + label_selector.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    if (state != null) result += """state=$state"""
    result += """pod_sandbox_id=${sanitize(pod_sandbox_id)}"""
    if (label_selector.isNotEmpty()) result += """label_selector=$label_selector"""
    return result.joinToString(prefix = "ContainerFilter{", separator = ", ", postfix = "}")
  }

  fun copy(
    id: String = this.id,
    state: ContainerStateValue? = this.state,
    pod_sandbox_id: String = this.pod_sandbox_id,
    label_selector: Map<String, String> = this.label_selector,
    unknownFields: ByteString = this.unknownFields
  ): ContainerFilter = ContainerFilter(id, state, pod_sandbox_id, label_selector, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<ContainerFilter> = object : ProtoAdapter<ContainerFilter>(
      FieldEncoding.LENGTH_DELIMITED, 
      ContainerFilter::class, 
      "type.googleapis.com/runtime.v1alpha2.ContainerFilter", 
      PROTO_3, 
      null
    ) {
      private val label_selectorAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      override fun encodedSize(value: ContainerFilter): Int {
        var size = value.unknownFields.size
        if (value.id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        if (value.state != null) size += ContainerStateValue.ADAPTER.encodedSizeWithTag(2,
            value.state)
        if (value.pod_sandbox_id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3,
            value.pod_sandbox_id)
        size += label_selectorAdapter.encodedSizeWithTag(4, value.label_selector)
        return size
      }

      override fun encode(writer: ProtoWriter, value: ContainerFilter) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        if (value.state != null) ContainerStateValue.ADAPTER.encodeWithTag(writer, 2, value.state)
        if (value.pod_sandbox_id != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.pod_sandbox_id)
        label_selectorAdapter.encodeWithTag(writer, 4, value.label_selector)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): ContainerFilter {
        var id: String = ""
        var state: ContainerStateValue? = null
        var pod_sandbox_id: String = ""
        val label_selector = mutableMapOf<String, String>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> state = ContainerStateValue.ADAPTER.decode(reader)
            3 -> pod_sandbox_id = ProtoAdapter.STRING.decode(reader)
            4 -> label_selector.putAll(label_selectorAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return ContainerFilter(
          id = id,
          state = state,
          pod_sandbox_id = pod_sandbox_id,
          label_selector = label_selector,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: ContainerFilter): ContainerFilter = value.copy(
        state = value.state?.let(ContainerStateValue.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
