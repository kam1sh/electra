// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.RuntimeCondition in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * RuntimeCondition contains condition information for the runtime.
 * There are 2 kinds of runtime conditions:
 * 1. Required conditions: Conditions are required for kubelet to work
 * properly. If any required condition is unmet, the node will be not ready.
 * The required conditions include:
 *   * RuntimeReady: RuntimeReady means the runtime is up and ready to accept
 *   basic containers e.g. container only needs host network.
 *   * NetworkReady: NetworkReady means the runtime network is up and ready to
 *   accept containers which require container network.
 * 2. Optional conditions: Conditions are informative to the user, but kubelet
 * will not rely on. Since condition type is an arbitrary string, all conditions
 * not required are optional. These conditions will be exposed to users to help
 * them understand the status of the system.
 */
class RuntimeCondition(
  /**
   * Type of runtime condition.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val type: String = "",
  /**
   * Status of the condition, one of true/false. Default: false.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY
  )
  val status: Boolean = false,
  /**
   * Brief CamelCase string containing reason for the condition's last transition.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val reason: String = "",
  /**
   * Human-readable message indicating details about last transition.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val message: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<RuntimeCondition, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is RuntimeCondition) return false
    if (unknownFields != other.unknownFields) return false
    if (type != other.type) return false
    if (status != other.status) return false
    if (reason != other.reason) return false
    if (message != other.message) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + type.hashCode()
      result = result * 37 + status.hashCode()
      result = result * 37 + reason.hashCode()
      result = result * 37 + message.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """type=${sanitize(type)}"""
    result += """status=$status"""
    result += """reason=${sanitize(reason)}"""
    result += """message=${sanitize(message)}"""
    return result.joinToString(prefix = "RuntimeCondition{", separator = ", ", postfix = "}")
  }

  fun copy(
    type: String = this.type,
    status: Boolean = this.status,
    reason: String = this.reason,
    message: String = this.message,
    unknownFields: ByteString = this.unknownFields
  ): RuntimeCondition = RuntimeCondition(type, status, reason, message, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<RuntimeCondition> = object : ProtoAdapter<RuntimeCondition>(
      FieldEncoding.LENGTH_DELIMITED, 
      RuntimeCondition::class, 
      "type.googleapis.com/runtime.v1alpha2.RuntimeCondition", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: RuntimeCondition): Int {
        var size = value.unknownFields.size
        if (value.type != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.type)
        if (value.status != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(2, value.status)
        if (value.reason != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.reason)
        if (value.message != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.message)
        return size
      }

      override fun encode(writer: ProtoWriter, value: RuntimeCondition) {
        if (value.type != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.type)
        if (value.status != false) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.status)
        if (value.reason != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.reason)
        if (value.message != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.message)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): RuntimeCondition {
        var type: String = ""
        var status: Boolean = false
        var reason: String = ""
        var message: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> type = ProtoAdapter.STRING.decode(reader)
            2 -> status = ProtoAdapter.BOOL.decode(reader)
            3 -> reason = ProtoAdapter.STRING.decode(reader)
            4 -> message = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return RuntimeCondition(
          type = type,
          status = status,
          reason = reason,
          message = message,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: RuntimeCondition): RuntimeCondition = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
