// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.MemoryUsage in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * MemoryUsage provides the memory usage information.
 */
class MemoryUsage(
  /**
   * Timestamp in nanoseconds at which the information were collected. Must be > 0.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  val timestamp: Long = 0L,
  /**
   * The amount of working set memory in bytes.
   */
  @field:WireField(
    tag = 2,
    adapter = "runtime.v1alpha2.UInt64Value#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "workingSetBytes"
  )
  val working_set_bytes: UInt64Value? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<MemoryUsage, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is MemoryUsage) return false
    if (unknownFields != other.unknownFields) return false
    if (timestamp != other.timestamp) return false
    if (working_set_bytes != other.working_set_bytes) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + timestamp.hashCode()
      result = result * 37 + working_set_bytes.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """timestamp=$timestamp"""
    if (working_set_bytes != null) result += """working_set_bytes=$working_set_bytes"""
    return result.joinToString(prefix = "MemoryUsage{", separator = ", ", postfix = "}")
  }

  fun copy(
    timestamp: Long = this.timestamp,
    working_set_bytes: UInt64Value? = this.working_set_bytes,
    unknownFields: ByteString = this.unknownFields
  ): MemoryUsage = MemoryUsage(timestamp, working_set_bytes, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<MemoryUsage> = object : ProtoAdapter<MemoryUsage>(
      FieldEncoding.LENGTH_DELIMITED, 
      MemoryUsage::class, 
      "type.googleapis.com/runtime.v1alpha2.MemoryUsage", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: MemoryUsage): Int {
        var size = value.unknownFields.size
        if (value.timestamp != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(1, value.timestamp)
        if (value.working_set_bytes != null) size += UInt64Value.ADAPTER.encodedSizeWithTag(2,
            value.working_set_bytes)
        return size
      }

      override fun encode(writer: ProtoWriter, value: MemoryUsage) {
        if (value.timestamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.timestamp)
        if (value.working_set_bytes != null) UInt64Value.ADAPTER.encodeWithTag(writer, 2,
            value.working_set_bytes)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): MemoryUsage {
        var timestamp: Long = 0L
        var working_set_bytes: UInt64Value? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> timestamp = ProtoAdapter.INT64.decode(reader)
            2 -> working_set_bytes = UInt64Value.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return MemoryUsage(
          timestamp = timestamp,
          working_set_bytes = working_set_bytes,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: MemoryUsage): MemoryUsage = value.copy(
        working_set_bytes = value.working_set_bytes?.let(UInt64Value.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
