// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.RuntimeService in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.GrpcCall
import com.squareup.wire.Service

/**
 * Runtime service defines the public APIs for remote container runtimes
 */
interface RuntimeServiceClient : Service {
  /**
   * Version returns the runtime name, runtime version, and runtime API version.
   */
  fun Version(): GrpcCall<VersionRequest, VersionResponse>

  /**
   * RunPodSandbox creates and starts a pod-level sandbox. Runtimes must ensure
   * the sandbox is in the ready state on success.
   */
  fun RunPodSandbox(): GrpcCall<RunPodSandboxRequest, RunPodSandboxResponse>

  /**
   * StopPodSandbox stops any running process that is part of the sandbox and
   * reclaims network resources (e.g., IP addresses) allocated to the sandbox.
   * If there are any running containers in the sandbox, they must be forcibly
   * terminated.
   * This call is idempotent, and must not return an error if all relevant
   * resources have already been reclaimed. kubelet will call StopPodSandbox
   * at least once before calling RemovePodSandbox. It will also attempt to
   * reclaim resources eagerly, as soon as a sandbox is not needed. Hence,
   * multiple StopPodSandbox calls are expected.
   */
  fun StopPodSandbox(): GrpcCall<StopPodSandboxRequest, StopPodSandboxResponse>

  /**
   * RemovePodSandbox removes the sandbox. If there are any running containers
   * in the sandbox, they must be forcibly terminated and removed.
   * This call is idempotent, and must not return an error if the sandbox has
   * already been removed.
   */
  fun RemovePodSandbox(): GrpcCall<RemovePodSandboxRequest, RemovePodSandboxResponse>

  /**
   * PodSandboxStatus returns the status of the PodSandbox. If the PodSandbox is not
   * present, returns an error.
   */
  fun PodSandboxStatus(): GrpcCall<PodSandboxStatusRequest, PodSandboxStatusResponse>

  /**
   * ListPodSandbox returns a list of PodSandboxes.
   */
  fun ListPodSandbox(): GrpcCall<ListPodSandboxRequest, ListPodSandboxResponse>

  /**
   * CreateContainer creates a new container in specified PodSandbox
   */
  fun CreateContainer(): GrpcCall<CreateContainerRequest, CreateContainerResponse>

  /**
   * StartContainer starts the container.
   */
  fun StartContainer(): GrpcCall<StartContainerRequest, StartContainerResponse>

  /**
   * StopContainer stops a running container with a grace period (i.e., timeout).
   * This call is idempotent, and must not return an error if the container has
   * already been stopped.
   * TODO: what must the runtime do after the grace period is reached?
   */
  fun StopContainer(): GrpcCall<StopContainerRequest, StopContainerResponse>

  /**
   * RemoveContainer removes the container. If the container is running, the
   * container must be forcibly removed.
   * This call is idempotent, and must not return an error if the container has
   * already been removed.
   */
  fun RemoveContainer(): GrpcCall<RemoveContainerRequest, RemoveContainerResponse>

  /**
   * ListContainers lists all containers by filters.
   */
  fun ListContainers(): GrpcCall<ListContainersRequest, ListContainersResponse>

  /**
   * ContainerStatus returns status of the container. If the container is not
   * present, returns an error.
   */
  fun ContainerStatus(): GrpcCall<ContainerStatusRequest, ContainerStatusResponse>

  /**
   * UpdateContainerResources updates ContainerConfig of the container.
   */
  fun UpdateContainerResources(): GrpcCall<UpdateContainerResourcesRequest,
      UpdateContainerResourcesResponse>

  /**
   * ReopenContainerLog asks runtime to reopen the stdout/stderr log file
   * for the container. This is often called after the log file has been
   * rotated. If the container is not running, container runtime can choose
   * to either create a new log file and return nil, or return an error.
   * Once it returns error, new container log file MUST NOT be created.
   */
  fun ReopenContainerLog(): GrpcCall<ReopenContainerLogRequest, ReopenContainerLogResponse>

  /**
   * ExecSync runs a command in a container synchronously.
   */
  fun ExecSync(): GrpcCall<ExecSyncRequest, ExecSyncResponse>

  /**
   * Exec prepares a streaming endpoint to execute a command in the container.
   */
  fun Exec(): GrpcCall<ExecRequest, ExecResponse>

  /**
   * Attach prepares a streaming endpoint to attach to a running container.
   */
  fun Attach(): GrpcCall<AttachRequest, AttachResponse>

  /**
   * PortForward prepares a streaming endpoint to forward ports from a PodSandbox.
   */
  fun PortForward(): GrpcCall<PortForwardRequest, PortForwardResponse>

  /**
   * ContainerStats returns stats of the container. If the container does not
   * exist, the call returns an error.
   */
  fun ContainerStats(): GrpcCall<ContainerStatsRequest, ContainerStatsResponse>

  /**
   * ListContainerStats returns stats of all running containers.
   */
  fun ListContainerStats(): GrpcCall<ListContainerStatsRequest, ListContainerStatsResponse>

  /**
   * UpdateRuntimeConfig updates the runtime configuration based on the given request.
   */
  fun UpdateRuntimeConfig(): GrpcCall<UpdateRuntimeConfigRequest, UpdateRuntimeConfigResponse>

  /**
   * Status returns the status of the runtime.
   */
  fun Status(): GrpcCall<StatusRequest, StatusResponse>
}
