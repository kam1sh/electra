// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.CpuUsage in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * CpuUsage provides the CPU usage information.
 */
class CpuUsage(
  /**
   * Timestamp in nanoseconds at which the information were collected. Must be > 0.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  val timestamp: Long = 0L,
  /**
   * Cumulative CPU usage (sum across all cores) since object creation.
   */
  @field:WireField(
    tag = 2,
    adapter = "runtime.v1alpha2.UInt64Value#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "usageCoreNanoSeconds"
  )
  val usage_core_nano_seconds: UInt64Value? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<CpuUsage, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CpuUsage) return false
    if (unknownFields != other.unknownFields) return false
    if (timestamp != other.timestamp) return false
    if (usage_core_nano_seconds != other.usage_core_nano_seconds) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + timestamp.hashCode()
      result = result * 37 + usage_core_nano_seconds.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """timestamp=$timestamp"""
    if (usage_core_nano_seconds != null) result +=
        """usage_core_nano_seconds=$usage_core_nano_seconds"""
    return result.joinToString(prefix = "CpuUsage{", separator = ", ", postfix = "}")
  }

  fun copy(
    timestamp: Long = this.timestamp,
    usage_core_nano_seconds: UInt64Value? = this.usage_core_nano_seconds,
    unknownFields: ByteString = this.unknownFields
  ): CpuUsage = CpuUsage(timestamp, usage_core_nano_seconds, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<CpuUsage> = object : ProtoAdapter<CpuUsage>(
      FieldEncoding.LENGTH_DELIMITED, 
      CpuUsage::class, 
      "type.googleapis.com/runtime.v1alpha2.CpuUsage", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: CpuUsage): Int {
        var size = value.unknownFields.size
        if (value.timestamp != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(1, value.timestamp)
        if (value.usage_core_nano_seconds != null) size += UInt64Value.ADAPTER.encodedSizeWithTag(2,
            value.usage_core_nano_seconds)
        return size
      }

      override fun encode(writer: ProtoWriter, value: CpuUsage) {
        if (value.timestamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.timestamp)
        if (value.usage_core_nano_seconds != null) UInt64Value.ADAPTER.encodeWithTag(writer, 2,
            value.usage_core_nano_seconds)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): CpuUsage {
        var timestamp: Long = 0L
        var usage_core_nano_seconds: UInt64Value? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> timestamp = ProtoAdapter.INT64.decode(reader)
            2 -> usage_core_nano_seconds = UInt64Value.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return CpuUsage(
          timestamp = timestamp,
          usage_core_nano_seconds = usage_core_nano_seconds,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: CpuUsage): CpuUsage = value.copy(
        usage_core_nano_seconds = value.usage_core_nano_seconds?.let(UInt64Value.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
