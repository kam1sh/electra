// Code generated by Wire protocol buffer compiler, do not edit.
// Source: runtime.v1alpha2.AuthConfig in io/k8s/cri_api.proto
package runtime.v1alpha2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * AuthConfig contains authorization information for connecting to a registry.
 */
class AuthConfig(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val username: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val password: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  val auth: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "serverAddress"
  )
  val server_address: String = "",
  /**
   * IdentityToken is used to authenticate the user and get
   * an access token for the registry.
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "identityToken"
  )
  val identity_token: String = "",
  /**
   * RegistryToken is a bearer token to be sent to a registry
   */
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "registryToken"
  )
  val registry_token: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<AuthConfig, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is AuthConfig) return false
    if (unknownFields != other.unknownFields) return false
    if (username != other.username) return false
    if (password != other.password) return false
    if (auth != other.auth) return false
    if (server_address != other.server_address) return false
    if (identity_token != other.identity_token) return false
    if (registry_token != other.registry_token) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + username.hashCode()
      result = result * 37 + password.hashCode()
      result = result * 37 + auth.hashCode()
      result = result * 37 + server_address.hashCode()
      result = result * 37 + identity_token.hashCode()
      result = result * 37 + registry_token.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """username=${sanitize(username)}"""
    result += """password=${sanitize(password)}"""
    result += """auth=${sanitize(auth)}"""
    result += """server_address=${sanitize(server_address)}"""
    result += """identity_token=${sanitize(identity_token)}"""
    result += """registry_token=${sanitize(registry_token)}"""
    return result.joinToString(prefix = "AuthConfig{", separator = ", ", postfix = "}")
  }

  fun copy(
    username: String = this.username,
    password: String = this.password,
    auth: String = this.auth,
    server_address: String = this.server_address,
    identity_token: String = this.identity_token,
    registry_token: String = this.registry_token,
    unknownFields: ByteString = this.unknownFields
  ): AuthConfig = AuthConfig(username, password, auth, server_address, identity_token,
      registry_token, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<AuthConfig> = object : ProtoAdapter<AuthConfig>(
      FieldEncoding.LENGTH_DELIMITED, 
      AuthConfig::class, 
      "type.googleapis.com/runtime.v1alpha2.AuthConfig", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: AuthConfig): Int {
        var size = value.unknownFields.size
        if (value.username != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.username)
        if (value.password != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.password)
        if (value.auth != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.auth)
        if (value.server_address != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4,
            value.server_address)
        if (value.identity_token != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5,
            value.identity_token)
        if (value.registry_token != "") size += ProtoAdapter.STRING.encodedSizeWithTag(6,
            value.registry_token)
        return size
      }

      override fun encode(writer: ProtoWriter, value: AuthConfig) {
        if (value.username != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.username)
        if (value.password != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.password)
        if (value.auth != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.auth)
        if (value.server_address != "") ProtoAdapter.STRING.encodeWithTag(writer, 4,
            value.server_address)
        if (value.identity_token != "") ProtoAdapter.STRING.encodeWithTag(writer, 5,
            value.identity_token)
        if (value.registry_token != "") ProtoAdapter.STRING.encodeWithTag(writer, 6,
            value.registry_token)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): AuthConfig {
        var username: String = ""
        var password: String = ""
        var auth: String = ""
        var server_address: String = ""
        var identity_token: String = ""
        var registry_token: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> username = ProtoAdapter.STRING.decode(reader)
            2 -> password = ProtoAdapter.STRING.decode(reader)
            3 -> auth = ProtoAdapter.STRING.decode(reader)
            4 -> server_address = ProtoAdapter.STRING.decode(reader)
            5 -> identity_token = ProtoAdapter.STRING.decode(reader)
            6 -> registry_token = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return AuthConfig(
          username = username,
          password = password,
          auth = auth,
          server_address = server_address,
          identity_token = identity_token,
          registry_token = registry_token,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: AuthConfig): AuthConfig = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
